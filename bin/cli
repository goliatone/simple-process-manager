#!/usr/bin/env node

'use strict';
const os = require('os');
const prog = require('caporal');
const pkg = require('../package');
const cli = require('../lib/cli');
const { resolve } = require('path');
const { spawn } = require('child_process');
const Metadata = require('../lib/metadata');

prog
    .version(pkg.version)
    .description('Process manager utility.')
    // 'app' is required, 'env' is optional
    .command('start', 'Start a worker')
    .help('Worker should be a module that exports a shutdown and a start functions')
    .argument('<worker>', 'Worker script')
    .option('-n, --name <name>', 'Worker name', prog.STRING)
    .option('-m, --all-cores', 'Use all available cores', prog.BOOL, false)
    .option('-t, --total <instances>', 'Number of worker instances to start', prog.INT, 1)
    .action(function(args, options, logger) {

        let { worker } = args;
        let { total: instances, allCores } = options;

        if (!options.name) {
            options.name = getNameFromWorker(worker);
        }

        let name = options.name;

        //Save worker metadata
        // {instances, name}

        // process.title = process.argv[1] + ' ' + options.name;

        worker = resolve(worker);

        if (allCores) instances = os.cpus().length;

        cli.run({
            name,
            logger,
            worker,
            instances,
        });
    })
    .command('list', 'List active workers')
    .help('This command will show a list of all workers currently running and some metadata for each')
    .option('-j, --json', 'Return as JSON', prog.BOOL, false)
    .action(async function(args, options, logger) {

        const metadata = new Metadata({
            logger,
        });

        await metadata.load();

        if (options.json) {
            return console.log(JSON.stringify(metadata.meta));
        }

        metadata.forEach(info => {
            logger.info(info);
        });
    })
    .command('info', 'Get worker info')
    .help('This command will show details for a given currently running worker')
    .argument('<name>', 'Worker name')
    .option('-j, --json', 'Return as JSON', prog.BOOL, false)
    .action(async function(args, options, logger) {

        const metadata = new Metadata({
            logger
        });

        await metadata.load();

        const info = metadata.get(args.name);

        if (options.json) {
            return console.log(JSON.stringify(info));
        }

        logger.info(info);
    })
    .command('restart', 'Restart workers')
    .help('This command will restart each worker process one at a time giving time to clean up')
    .argument('<name>', 'Worker name')
    .action(async function(args, options, logger) {

        const metadata = new Metadata({
            logger
        });

        await metadata.load();

        const info = metadata.get(args.name);

        if (!info) {
            return logger.warn('No worker found with name "%s"', args.name);
        }

        logger.info('Restarting worker %s: PID %s', info.name, info.pid);

        spawn('kill', ['-SIGUSR2', info.pid]);
    });

prog.parse(process.argv);


function getNameFromWorker(worker) {
    const { basename, extname } = require('path');
    return basename(worker, extname(worker));
}